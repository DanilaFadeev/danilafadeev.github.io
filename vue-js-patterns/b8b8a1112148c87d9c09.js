(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{89:function(e,n,s){"use strict";s.r(n),n.default='<template>\n  <div class="CodeViewer">\n    <el-row :gutter="20">\n      <el-col :span="9">\n        <el-tag type="success">\n          Example Preview:\n        </el-tag>\n        <slot />\n      </el-col>\n      <el-col :span="15">\n        <el-collapse v-model="activeSources">\n          <el-collapse-item\n            v-for="source in sourceItems"\n            :key="source.path"\n            :title="source.path | filename"\n            :name="source.path"\n          >\n            <highlight-code :lang="source.lang">\n              {{ source.codeListing }}\n            </highlight-code>\n          </el-collapse-item>\n        </el-collapse>\n      </el-col>\n    </el-row>\n  </div>\n</template>\n\n<script>\nexport default {\n  filters: {\n    filename(path) {\n      return path.split(\'/\').pop();\n    }\n  },\n  props: {\n    sources: {\n      type: Array,\n      required: true,\n      validator(sources) {\n        if (!sources || !Array.isArray(sources) || sources.length === 0) {\n          return false;\n        }\n        return !sources.some((source) => !(source.path && source.lang));\n      }\n    },\n\n  },\n  data() {\n    return {\n      sourceItems: [],\n      activeSources: []\n    };\n  },\n  watch: { sources: \'loadSources\' },\n  mounted() {\n    this.loadSources();\n  },\n  methods: {\n    async loadSources() {\n      this.sourceItems = await Promise.all(\n        this.$props.sources.map(async (source) => ({\n          ...source,\n          codeListing: (await import(`!!raw-loader!../${source.path}`)).default\n        }))\n      );\n      this.activeSources = this.sourceItems.map((item) => item.path);\n    }\n  }\n};\n<\/script>\n\n<style lang="scss">\n.CodeViewer {\n  .el-tag {\n    margin-bottom: 20px;\n  }\n\n  .hljs {\n    padding: 20px;\n    line-height: 1.2;\n  }\n}\n</style>\n'}}]);